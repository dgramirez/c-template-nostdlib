; Linux Syscall Table (x86_64) Here:
; https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl 
;
; use man "[function_name](2)" to get the system calls declaration.
;     eg. man "write(2)"
;
; Reminder #1: This is ONLY for 64-Bit Linux.
; Reminder #2: The 4th Argument **MUST** use r10 instead of RCX.
;              as it's a requirement for the syscall instruction.
;              r10 is used for static chain pointer, unless its unnecessary
;              pushq r10 to save its value, then popq r10 prior to ret.
; Reminder #3: [rdi] [rsi] [rdx] [rcx -> r10] [r8] [r9]

public sys_write
sys_write:
	use64

	mov rax, 1
	syscall

	ret

public sys_mmap
sys_mmap:
	use64
	pushq r10

	mov rax, 9
	mov r10, rcx
	syscall

	popq r10
	ret

public sys_munmap
sys_munmap:
	use64

	mov rax, 11
	syscall

	ret

public sys_nanosleep
sys_nanosleep:
	use64

	mov rax, 35
	syscall

	ret

public sys_clone
sys_clone:
	use64

	mov rax, 56
	syscall

	mov rdi, rsp     ; MAJOR NOTE - This is a hack to use for clone!
	ret              ; Requires a structure which contains the thread
                     ; entrypoint! [Read include/cpu/thread.h]
	                 ; Further Reading:
                     ;     https://nullprogram.com/blog/2023/03/23/

public sys_exit
sys_exit:
	use64

	mov rax, 60
	syscall

	ret              ; This shouldn't be reached...

public sys_futex
sys_futex:
	use64
	pushq r10

	mov rax, 202
	mov r10, rcx
	syscall

	popq r10
	ret

