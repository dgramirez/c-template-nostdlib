; Notes: Some Enforcements:
;   Name Enforcements:
;       - [_afn_]foo[B]
;       - Prefix: _afn_ (Public Assembly Function)
;       - foo           (Function Descriptor)
;       - Suffix: B     (Byte Type)
;           - Optional. Only useful if it improves function descriptor.
;
;   Byte Type:
;       [B]yte:    8 bytes
;       [S]hort:  16 bytes
;       [I]nt:    32 bytes
;       [L]ong:   64 bytes
;       [X]MM:   128 bytes
;       [Y]MM:   256 bytes
;       [Z]MM:   512 bytes
;
;       NOTE: Don't mix this up with the Window's Conventions!
;             This is in the perspective of the architecture, not platform!
;             eg. MS's DWORD == 32 bytes, but on x86_64 its 64 bytes!
;       [H]Word: Half Word Size   (16 -> x86)
;                                 (32 -> x86_64)
;
;       [W]ord:  Word Size        (32 -> x86)
;                                 (64 -> x86_64)
;
;       [D]Word: Double Word Size (64  -> x86
;                                 (128 -> x86_64)
;
;       [Q]Word: Quad Word Size   (128 -> x86)
;                                 (256 -> x86_64)
;   Calling Convention Reminder:
;       Linux x86_64:
;           - rdi    rsi
;           - rdx    rcx
;           -  r8     r9
;
;           - rcx -> r10 (Linux Syscalls Only)
;       Windows x86_64:
;           - rcx    rdx
;           -  r8     r9
;       Windows x86 [__fastcall]:
;           - ecx    edx
;           - [esp+(1+x)*4]
;           - [esp+(2+x)*4]
;
;           - NOTE: the x in the esp is equal to the pushd level prior to
;                   this call. the 1, 2, ... is the args starting with arg2
;                   and onwards. Remember: ecx and edx occupy arg0 & arg1
;                   respectively.

match =LINUX, PLATFORM {
	; void _afn_atstoreW(void *ptr, isz val)
	public _afn_atstoreW
	_afn_atstoreW:
		use64

		mov [rdi], rsi
		sfence
		ret

	; void _afn_atstoreI(void *ptr, isz val)
	public _afn_atstoreI
	_afn_atstoreI:
		use32

		mov [edi], esi
		sfence
		ret

	; void _afn_atstoreD(void *ptr, void *val)
	public _afn_atstoreD
	_afn_atstoreD:
		use64

		pushq [rsi]
		pushq [rsi+8]

		; SPINLOCK
		.spinlock_wait_store128:
		lea r8, [_afn_atstoreDW_lock]
		xor rax, rax
		mov rcx, 1
		lock cmpxchg [r8], rcx
		jnz .spinlock_wait_store128

		; CRITICAL SECTION
		popq [rdi+8]
		popq [rdi]

		; RELEASE LOCK
		mov qword [r8], 0
		ret

	; isz _afn_atloadW(void *ptr)
	public _afn_atloadW
	_afn_atloadW:
		use64

		lfence
		mov rax, [rdi]
		ret

	; isz _afn_atloadI(void *ptr)
	public _afn_atloadI
	_afn_atloadI:
		use32

		lfence
		mov eax, [edi]
		ret

	; isz _afn_atcasW(void *ptr, isz old_val, isz new_val)
	public _afn_atcasW
	_afn_atcasW:
		use64

		; Compare and Swap
		mov rax, rsi
		lock cmpxchg [rdi], rdx
		ret

	; isz _afn_atcasD(void *ptr, void *old_val, void *new_val)
	public _afn_atcasD
	_afn_atcasD:
		use64

		pushq [rdx+8]
		pushq [rdx]

		; SPINLOCK
		.spinlock_wait_cas128:
		lea r8, [_afn_atcasD_lock]
		xor rax, rax
		mov rcx, 1
		lock cmpxchg [r8], rcx
		jnz .spinlock_wait_cas128

		; CRITICAL SECTION
		mov rax, [rsi]
		popq rcx
		cmpxchg [rdi], rcx
		jnz .cas128_fail

		mov rax, [rsi+8]
		pop rcx
		cmpxchg [rdi+8], rcx
		jnz .cas128_fail

		; RELEASE LOCK
		mov qword [r8], 0
		mov rax, 1
		ret

		.cas128_fail:
		mov qword [r8], 0
		mov rax, 0
		ret

	; isz _afn_atswapW(void *ptr, isz val)
	public _afn_atswapW
	_afn_atswapW:
		use64

		; Swap
		mov rax, rsi
		lock xchg [rdi], rax
		ret

	; void _afn_atincW(void *ptr)
	public _afn_atincW
	_afn_atincW:
		use64

		; Add and Fetch
		lock add [rdi], WORD 1
		ret

	; void _afn_atdecW(void *ptr)
	public _afn_atdecW
	_afn_atdecW:
		use64

		; Add and Fetch
		lock add [rdi], WORD -1
		ret

	; void _afn_lfence()
	public _afn_lfence
	_afn_lfence:
		lfence
		ret

	; void _afn_sfence()
	public _afn_sfence
	_afn_sfence:
		sfence
		ret

	; void _afn_mfence()
	public _afn_mfence
	_afn_mfence:
		mfence
		ret

	; void _afn_cpurelax()
	public _afn_cpurelax
	_afn_cpurelax:
		pause
		ret
}

match =WIN64, PLATFORM {
	; void _afn_atstoreW(void *ptr, isz val)
	public _afn_atstoreW
	_afn_atstoreW:
		use64

		mov [rcx], rdx
		sfence
		ret

	; void _afn_atstoreI(void *ptr, isz val)
	public _afn_atstoreI
	_afn_atstoreI:
		use32

		mov [ecx], edx
		sfence
		ret

	; isz _afn_atloadW(void *ptr)
	public _afn_atloadW
	_afn_atloadW:
		use64

		lfence
		mov rax, [rcx]
		ret

	; void _afn_atloadI(void *ptr, isz val)
	public _afn_atloadI
	_afn_atloadI:
		use32

		mov eax, [ecx]
		sfence
		ret

	; isz _afn_atcasW(void *ptr, isz old_val, isz new_val)
	public _afn_atcasW
	_afn_atcasW:
		use64

		; Compare and Swap
		mov rax, rdx
		lock cmpxchg [rcx], r8
		ret

	; isz _afn_atcasD(void *ptr, void *old_val, void *new_val)
	public _afn_atcasD
	_afn_atcasD:
		use64

		pushq rbx
		pushq [r8+8]
		pushq [r8]

		; SPINLOCK
		.spinlock_wait_cas128:
		lea rbx, [_afn_atcasD_lock]
		xor rax, rax
		mov r9, 1
		lock cmpxchg [rbx], r9
		jnz .spinlock_wait_cas128

		; CRITICAL SECTION
		mov rax, [rdx]
		popq r9
		cmpxchg [rcx], r9
		jnz .cas128_fail

		mov rax, [rdx+8]
		pop r9
		cmpxchg [rcx+8], r9
		jnz .cas128_fail2

		; RELEASE LOCK
		mov qword [rbx], 0
		mov rax, 1

		popq rbx
		ret

		.cas128_fail:
		popq r9

		.cas128_fail2:
		mov qword [rbx], 0
		mov rax, 0

		popq rbx
		ret

	; isz _afn_atswapW(void *ptr, isz val)
	public _afn_atswapW
	_afn_atswapW:
		use64

		; Swap
		mov rax, rdx
		lock xchg [rcx], rax
		ret

	; void _afn_atincW(void *ptr)
	public _afn_atincW
	_afn_atincW:
		use64

		; Add and Fetch
		lock add [rcx], WORD 1
		ret

	; void _afn_atdecW(void *ptr)
	public _afn_atdecW
	_afn_atdecW:
		use64

		; Add and Fetch
		lock add [rcx], WORD -1
		ret

	; void _afn_lfence()
	public _afn_lfence
	_afn_lfence:
		lfence
		ret

	; void _afn_sfence()
	public _afn_sfence
	_afn_sfence:
		sfence
		ret

	; void _afn_mfence()
	public _afn_mfence
	_afn_mfence:
		mfence
		ret

	; void _afn_cpurelax()
	public _afn_cpurelax
	_afn_cpurelax:
		pause
		ret
}

match =WIN32, PLATFORM {
	; void __fastcall _afn_atstoreW(void *ptr, isz val)
	public _afn_atstoreW as '@_afn_atstoreW@8'
	_afn_atstoreW:
		use32

		mov [ecx], edx
		sfence
		ret

	; void __fastcall _afn_atstoreI(void *ptr, isz val)
	public _afn_atstoreI as '@_afn_atstoreI@8'
	_afn_atstoreI:
		use32

		mov [ecx], edx
		sfence
		ret

	; isz __fastcall _afn_atloadW(void *ptr)
	public _afn_atloadW as '@_afn_atloadW@4'
	_afn_atloadW:
		use32

		lfence
		mov eax, [ecx]
		ret

	; isz __fastcall _afn_atloadI(void *ptr)
	public _afn_atloadI as '@_afn_atloadI@4'
	_afn_atloadI:
		use32

		lfence
		mov eax, [ecx]
		ret


	; isz __fastcall _afn_atcasW(void *ptr, isz old_val, isz new_val)
	public _afn_atcasW as '@_afn_atcasW@12'
	_afn_atcasW:
		use32

		; Compare and Swap
		push ebx
		push esi

		mov esi, [esp+(1+2)*4]
		mov ebx, esi

		mov eax, edx
		lock cmpxchg [ecx], ebx

		pop esi
		pop ebx

		ret

	; isz _afn_atcasD(void *ptr, void *old_val, void *new_val)
	public _afn_atcasD as '@_afn_atcasD@12'
	_afn_atcasD:
		use32

		; Calling Convention Save
		pushd edi
		pushd esi
		pushd ebx

		; Value Save
		mov esi, [esp+(1+3)*4]
		pushd [esi+4]
		pushd [esi]

		; SPINLOCK
		.spinlock_wait_cas128:
		lea ebx, [_afn_atcasD_lock]
		xor eax, eax
		mov edi, 1
		lock cmpxchg [ebx], edi
		jnz .spinlock_wait_cas128

		; CRITICAL SECTION
		mov eax, [edx]
		popd edi
		cmpxchg [ecx], edi
		jnz .cas128_fail

		mov eax, [edx+4]
		popd edi
		cmpxchg [ecx+4], edi
		jnz .cas128_fail2

		; RELEASE LOCK
		mov dword [ebx], 0
		mov eax, 1

		popd ebx
		popd esi
		popd edi
		ret

		.cas128_fail:
		popd edi

		.cas128_fail2:
		mov dword [ebx], 0
		mov eax, 0

		popd ebx
		popd esi
		popd edi
		ret

	; isz __fastcall _afn_atswapW(void *ptr, isz val)
	public _afn_atswapW as '@_afn_atswapW@8'
	_afn_atswapW:
		use32

		; Swap
		mov eax, edx
		lock xchg [ecx], eax
		ret

	; void __fastcall _afn_atincW(void *ptr)
	public _afn_atincW as '@_afn_atincW@4'
	_afn_atincW:
		use32

		; Add and Fetch
		lock add [ecx], WORD 1
		ret

	; void __fastcall _afn_atdecW(void *ptr)
	public _afn_atdecW as '@_afn_atdecW@4'
	_afn_atdecW:
		use32

		; Add and Fetch
		lock add [ecx], WORD -1
		ret

	; void _afn_lfence()
	public _afn_lfence as '@_afn_lfence@0'
	_afn_lfence:
		lfence
		ret

	; void _afn_sfence()
	public _afn_sfence as '@_afn_sfence@0'
	_afn_sfence:
		sfence
		ret

	; void _afn_mfence()
	public _afn_mfence as '@_afn_mfence@0'
	_afn_mfence:
		mfence
		ret

	; void _afn_cpurelax()
	public _afn_cpurelax as '@_afn_cpurelax@0'
	_afn_cpurelax:
		pause
		ret
}

